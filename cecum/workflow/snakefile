configfile: "workflow/config.yml"

rule target:
    input:
        expand(config["raw_seq_dir"] + "{run}_demux.qza",
                run=config["raw_seqs"]),
        expand(config["raw_seq_dir"] + "{run}_demux_details.qza",
                run=config["raw_seqs"]),
        expand(config["raw_seq_dir"] + "{run}_demux.qzv",
                run=config["raw_seqs"]),
        expand("data/qiime/{run}_table.qza",
                run=config["raw_seqs"]),
        expand("data/qiime/{run}_rep_seqs.qza",
                run=config["raw_seqs"]),
        expand("data/qiime/{run}_denoise_stats.qza",
                run=config["raw_seqs"]),
        "plots/faith_pd.pdf",
        "plots/shannon_entropy.pdf",
        "stats/faith_diet_results.tsv",
        "stats/faith_dunn.tsv",
        "stats/shannon_diet_results.tsv",
        "stats/shannon_dunn.tsv",
        "plots/faith_stat_vis.pdf",
        "plots/shannon_stat_vis.pdf",
        "plots/unweighted_unifrac_pcoa.pdf",
        "plots/weighted_unifrac_pcoa.pdf",
        "stats/w_adonis_results.tsv",
        "stats/uw_adonis_results.tsv",
        "plots/family_abun1.pdf",
        "plots/family_abun2.pdf",
        "stats/family_abun_lm.tsv",
        "stats/family_abun_dunn.tsv",
        "plots/famAbun_stat_vis.pdf",
        "plots/histopathology.pdf",
        "stats/histopathology_lm.tsv",
        "stats/histopathology_dunn.tsv",
        "plots/neat_toxin.pdf",
        "plots/dil_toxin.pdf",
        "stats/neatToxin_kruskal_test.tsv",
        "stats/neatToxin_dunn_test.tsv",
        "stats/dilToxin_kruskal_test.tsv",
        "stats/dilToxin_dunn_test.tsv",
        "plots/metabolomics.pdf",
        "stats/metab_linear_model.tsv",
        "stats/metab_dunn_test.tsv",
        "stats/metab_kruskal_test.tsv"


rule demux:
    input:
        in1 = expand(config["raw_seq_dir"] + "{run_barcodes}_barcodes.txt",
                        run_barcodes=config["barcodes"]),
        in2 = expand(config["raw_seq_dir"] + "{run}_paired_end_seqs.qza",
                        run=config["raw_seqs"])
    output:
        out1 = config["raw_seq_dir"] + "{run}_demux.qza",
        out2 = config["raw_seq_dir"] + "{run}_demux_details.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime demux emp-paired \
            --m-barcodes-file {input.in1} \
            --m-barcodes-column BarcodeSequence \
            --i-seqs {input.in2} \
            --o-per-sample-sequences {output.out1} \
            --o-error-correction-details {output.out2} \
            --p-no-golay-error-correction
        """


rule demux_vis:
    input:
        config["raw_seq_dir"] + "{run}_demux.qza"
    output:
        config["raw_seq_dir"] + "{run}_demux.qzv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime demux summarize \
            --i-data {input} \
            --o-visualization {output}
        """


rule dada2:
    input:
       config["raw_seq_dir"] + "{run}_demux.qza"
    output:
        table = "data/qiime/{run}_table.qza",
        seqs = "data/qiime/{run}_rep_seqs.qza",
        stats = "data/qiime/{run}_denoise_stats.qza"
    conda:
        "qiime2-2023.5"
    params:
        trim_left_for=config["dada2_trim_left_for"],
        trim_left_rev=config["dada2_trim_left_rev"],
        trunc_len_for=config["dada2_trunc_len_for"],
        trunc_len_rev=config["dada2_trunc_len_rev"]
    shell:
        """
        qiime dada2 denoise-paired \
            --i-demultiplexed-seqs {input} \
            --p-trim-left-f {params.trim_left_for} \
            --p-trim-left-r {params.trim_left_rev} \
            --p-trunc-len-f {params.trunc_len_for} \
            --p-trunc-len-r {params.trunc_len_rev} \
            --o-table {output.table} \
            --o-representative-sequences {output.seqs} \
            --o-denoising-stats {output.stats}
        """


rule merge_run_tables:
    input:
        table1 = "data/qiime/" + config["run1_dir"] + "_table.qza",
        table2 = "data/qiime/" + config["run2_dir"] + "_table.qza",
        table3 = "data/qiime/" + config["run3_dir"] + "_table.qza",
        seqs1 = "data/qiime/" + config["run1_dir"] + "_rep_seqs.qza",
        seqs2 = "data/qiime/" + config["run2_dir"] + "_rep_seqs.qza",
        seqs3 = "data/qiime/" + config["run3_dir"] + "_rep_seqs.qza"
    output:
        merged_table = "data/qiime/merged_table.qza",
        merged_seqs = "data/qiime/merged_rep_seqs.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime feature-table merge \
            --i-tables {input.table1} \
            --i-tables {input.table2} \
            --i-tables {input.table3} \
            --o-merged-table {output.merged_table}

        qiime feature-table merge-seqs \
            --i-data {input.seqs1} \
            --i-data {input.seqs2} \
            --i-data {input.seqs3} \
            --o-merged-data {output.merged_seqs}
        """


rule get_reference_databases:
    output:
        "databases/sepp-refs-silva-128.qza",
        "databases/silva-138-99-515-806-nb-classifier.qza"
    shell:
        """
        wget https://data.qiime2.org/2023.5/common/sepp-refs-silva-128.qza -P ./databases/
        wget https://data.qiime2.org/2023.5/common/silva-138-99-515-806-nb-classifier.qza -P ./databases/
        """


rule sepp_phylo_tree:
    input:
        seqs = "data/qiime/merged_rep_seqs.qza",
        silva_ref = "databases/sepp-refs-silva-128.qza"
    output:
        tree = "data/qiime/tree.qza",
        placements = "data/qiime/placements.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime fragment-insertion sepp \
            --i-representative-sequences {input.seqs} \
            --i-reference-database {input.silva_ref} \
            --o-tree {output.tree} \
            --o-placements {output.placements}
        """


rule sepp_ASV_filtering:
    input:
        table = "data/qiime/merged_table.qza",
        tree = "data/qiime/tree.qza"
    output:
        filt_table = "data/qiime/filt_merged_table.qza",
        rem_table = "data/qiime/rem_merged_table.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime fragment-insertion filter-features \
            --i-table {input.table} \
            --i-tree {input.tree} \
            --o-filtered-table {output.filt_table} \
            --o-removed-table {output.rem_table}
        """


rule taxonomic_classification:
    input:
        silva_class = "databases/silva-138-99-515-806-nb-classifier.qza",
        seqs = "data/qiime/merged_rep_seqs.qza"
    output:
        taxonomy = "data/qiime/taxonomy.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime feature-classifier classify-sklearn \
            --i-classifier {input.silva_class} \
            --i-reads {input.seqs} \
            --o-classification {output.taxonomy}
        """


rule filter_taxonomy:
    input:
        filt_table = "data/qiime/filt_merged_table.qza",
        taxonomy = "data/qiime/taxonomy.qza"
    output:
        tax_filt = "data/qiime/taxonomy_filtered.qza",
        tax_filt_vis = "data/qiime/taxonomy_filtered.qzv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime taxa filter-table \
            --i-table {input.filt_table} \
            --i-taxonomy {input.taxonomy} \
            --p-include p_ \
            --p-exclude mitochondria,chloroplast \
            --o-filtered-table {output.tax_filt}
        
        qiime feature-table summarize \
            --i-table {output.tax_filt} \
            --o-visualization {output.tax_filt_vis}
        """

rule create_lacto_table:
    input:
        filt_table = "data/qiime/filt_merged_table.qza",
        taxonomy = "data/qiime/taxonomy.qza",
        seqs = "data/qiime/merged_rep_seqs.qza"
    output:
        lacto_table = "data/qiime/lacto_cecal_table.qza",
        lacto_rep_seqs = "data/qiime/lacto_rep_seqs.qza" 
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime taxa filter-table \
            --i-table {input.filt_table} \
            --i-taxonomy {input.taxonomy} \
            --p-include Lactococcus \
            --o-filtered-table {output.lacto_table}
        
        qiime feature-table filter-seqs \
            --i-data {input.seqs} \
            --i-table {output.lacto_table} \
            --o-filtered-data {output.lacto_rep_seqs}
        """


rule convert_to_fasta:
    input:
        lacto_rep_seqs = "data/qiime/lacto_rep_seqs.qza"
    output:
        output_path = "data/qiime/dna-sequences.fasta",
        lacto_fasta = "data/qiime/lactoOnly_rep_seqs.fasta"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path {input.lacto_rep_seqs} \
            --output-path {output.output_path}
        
        mv {output.output_path} {output.lacto_fasta}
        """


rule total_sum_scaling:
    input:
        biom = "data/qiime/filt_merged_table.qza",
        asvs = "data/qiime/lactoOnly_rep_seqs.fasta"
    output:
        table = "data/qiime/total_sum_scaling.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/total_sum_scaling.R --biom {input.biom} \
                                            --sequence {input.asvs} \
                                            --output {output.table}
        """


rule tss_tsv2biom:
    input:
        "data/qiime/total_sum_scaling.tsv" 
    output:
        "data/qiime/total_sum_scaling.biom"
    conda:
        "qiime2-2023.5"
    shell:
        """
        biom convert \
            -i {input} \
            -o {output} \
            --table-type "Table" \
            --to-hdf5
        """

rule tss_biom2qza:
    input:
        "data/qiime/total_sum_scaling.biom"
    output:
        "data/qiime/total_sum_scaling.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools import \
            --input-path {input} \
            --type 'FeatureTable[Frequency]' \
            --output-path {output}
        """


rule rep_seqs2fasta:
    input:
        "data/qiime/merged_rep_seqs.qza"
    output:
        "data/qiime/fasta_files/dna-sequences.fasta"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path {input} \
            --output-path {output}
        """


rule sepp_ASV_filtering2:
    input:
        table = "data/qiime/total_sum_scaling.qza",
        tree = "data/qiime/tree.qza"
    output:
        filt_table = "data/qiime/total_sum_filt_table.qza",
        rem_table = "data/qiime/total_sum_rem_table.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime fragment-insertion filter-features \
            --i-table {input.table} \
            --i-tree {input.tree} \
            --o-filtered-table {output.filt_table} \
            --o-removed-table {output.rem_table}
        """


rule filter_taxonomy2:
    input:
        table = "data/qiime/total_sum_scaling.qza",
        taxonomy = "data/qiime/taxonomy.qza"
    output:
        tax_filt = "data/qiime/tax_filt.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime taxa filter-table \
            --i-table {input.table} \
            --i-taxonomy {input.taxonomy} \
            --p-include p_ \
            --p-exclude mitochondria,chloroplast \
            --o-filtered-table {output.tax_filt}
        """

rule filter_taxonomy_vis2:
    input:
        "data/qiime/tax_filt.qza"
    output:
        "data/qiime/tax_filt.qzv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime feature-table summarize \
            --i-table {input} \
            --o-visualization {output}
        """

rule pre_core_metrics_filter:
    input:
        tax_filt = "data/qiime/tax_filt.qza",
        metadata = config["metadata"]
    output:
        otu_table = "data/qiime/otu_table.qza"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime feature-table filter-samples \
            --i-table {input.tax_filt} \
            --m-metadata-file {input.metadata} \
            --o-filtered-table {output.otu_table}
        """


rule core_metrics_analysis:
    input:
        tree = "data/qiime/tree.qza",
        otu_table = "data/qiime/otu_table.qza",
        metadata = config["metadata"]
    output:
        output_dir = directory("data/core_outputs")
    conda:
        "qiime2-2023.5"
    params:
        sampling_depth=config["core_metrics_sampling_depth"]
    shell:
        """
        qiime diversity core-metrics-phylogenetic \
            --i-phylogeny {input.tree} \
            --i-table {input.meta_filt_tax} \
            --p-sampling-depth  {params.sampling_depth} \
            --m-metadata-file {input.metadata} \
            --output-dir {output.output_dir}
        """

rule unzip_uw_distance_matrix:
    input:
       "data/core_outputs/unweighted_unifrac_distance_matrix.qza" 
    output:
        "data/core_outputs/uw_dist_matrix.tsv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path ./data/core_outputs/unweighted_unifrac_distance_matrix.qza \
            --output-path ./data/core_outputs/uw_dist_matrix
        
        mv ./data/core_outputs/uw_dist_matrix/distance-matrix.tsv \
        ./data/core_outputs/uw_dist_matrix/uw_dist_matrix.tsv

        mv ./data/core_outputs/uw_dist_matrix/uw_dist_matrix.tsv \
        ./data/core_outputs/
        """


rule unzip_w_distance_matrix:
    input:
       "data/core_outputs/weighted_unifrac_distance_matrix.qza"
    output:
        "data/core_outputs/w_dist_matrix.tsv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path ./data/core_outputs/weighted_unifrac_distance_matrix.qza \
            --output-path ./data/core_outputs/w_dist_matrix
        
        mv ./data/core_outputs/w_dist_matrix/distance-matrix.tsv \
        ./data/core_outputs/w_dist_matrix/w_dist_matrix.tsv

        mv ./data/core_outputs/w_dist_matrix/w_dist_matrix.tsv \
        ./data/core_outputs/ 
        """


rule unzip_shannon:
    input:
        "data/core_outputs/shannon_vector.qza"
    output:
        "data/core_outputs/shannon_entropy.tsv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path ./data/core_outputs/shannon_vector.qza \
            --output-path ./data/core_outputs/shannon_entropy
        
        mv ./data/core_outputs/shannon_entropy/alpha-diversity.tsv \
        ./data/core_outputs/shannon_entropy/shannon_entropy.tsv

        mv ./data/core_outputs/shannon_entropy/shannon_entropy.tsv \
        ./data/core_outputs/
        """


rule unzip_faith_pd:
    input:
        "data/core_outputs/faith_pd_vector.qza"
    output:
        "data/core_outputs/faith_pd.tsv"
    conda:
        "qiime2-2023.5"
    shell:
        """
        qiime tools export \
            --input-path ./data/core_outputs/faith_pd_vector.qza \
            --output-path ./data/core_outputs/faith_pd
        
        mv ./data/core_outputs/faith_pd/alpha-diversity.tsv \
        ./data/core_outputs/faith_pd/faith_pd.tsv

        mv ./data/core_outputs/faith_pd/faith_pd.tsv \
        ./data/core_outputs/
        """


rule sequencing_depth_calculation:
    input:
        biom = "data/qiime/filt_merged_table.qza",
        asvs = "data/qiime/lactoOnly_rep_seqs.fasta"
    output:
        table = "data/misc/seq_depth.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/seq_depth.R --biom {input.biom} \
                                    --sequence {input.asvs} \
                                    --output {output.table}
        """


rule metadata_processing:
    input:
        metadata = config["metadata"],
        sampleID_key = config["sampleID_key"],
        seq_depth = "data/misc/seq_depth.tsv",
        id_file = config["mouseID_facil_key"]
    output:
        table = config["processed_metadata"]
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/metadata_processing.R --metadata {input.metadata} \
                                              --cecal_key {input.sampleID_key} \
                                              --seq_depth {input.seq_depth} \
                                              --mouse_id_facil {input.id_file} \
                                              --output {output.table}
        """


rule bile_acid_preProcessing:
    input:
        bile_acid = config["bile_acid"],
        sampleID_key = config["sampleID_key"],
        id_file = config["mouseID_facil_key"]
    output:
        proc_bile_acid = "data/misc/corrected_bile_acid.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/bile_acid_processing.R --bile_acid {input.bile_acid} \
                                               --cecal_key {input.sampleID_key} \
                                               --mouse_id_facil {input.id_file} \
                                               --output {output.proc_bile_acid}
        """


rule toxin_metab_histo_bileAcid_processing:
    input:
        metadata = config["processed_metadata"],
        toxin = config["toxin"],
        histo = config["histo"],
        metab = config["metab"],
        bile_acid = "data/misc/corrected_bile_acid.tsv"
    output:
        proc_neat_toxin = "data/misc/processed_neatToxin.tsv",
        proc_dil_toxin = "data/misc/processed_dilutedToxin.tsv",
        proc_metab = "data/misc/processed_metabolomics.tsv",
        proc_histo = "data/misc/processed_histopathology.tsv",
        proc_bile_acid = "data/misc/processed_bile_acid.tsv",
        proc_bile_ratio = "data/misc/processed_ratio_bileAcid.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/toxinMetab_histoBile_file_prep.R --metadata {input.metadata} \
                                                         --toxin {input.toxin} \
                                                         --histopathology {input.histo} \
                                                         --metabolomics {input.metab} \
                                                         --bile_acid {input.bile_acid} \
                                                         --neat_toxin_out {output.proc_neat_toxin} \
                                                         --dil_toxin_out {output.proc_dil_toxin} \
                                                         --metab_out {output.proc_metab} \
                                                         --histo_out {output.proc_histo} \
                                                         --bile_acid_out {output.proc_bile_acid} \
                                                         --bile_ratio_out {output.proc_bile_ratio}
        """


rule alpha_diversity_plots:
    input:
        metadata = config["processed_metadata"],
        faith_pd = "data/core_outputs/faith_pd.tsv",
        shannon = "data/core_outputs/shannon_entropy.tsv"
    output:
        faith_plot = "plots/faith_pd.pdf",
        shannon_plot = "plots/shannon_entropy.pdf"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/alpha_div_plots.R --metadata {input.metadata} \
                                          --faith_pd {input.faith_pd} \
                                          --shannon {input.shannon} \
                                          --output_faith {output.faith_plot} \
                                          --output_shannon {output.shannon_plot}
        """


rule alpha_diversity_stats:
    input:
        metadata = config["processed_metadata"],
        faith_pd = "data/core_outputs/faith_pd.tsv",
        shannon = "data/core_outputs/shannon_entropy.tsv"
    output:
        faith_lm_sec = "stats/faith_diet_results.tsv",
        faith_dunn = "stats/faith_dunn.tsv",
        shannon_lm_sec = "stats/shannon_diet_results.tsv",
        shannon_dunn = "stats/shannon_dunn.tsv",
        faith_plot = "plots/faith_stat_vis.pdf",
        shannon_plot = "plots/shannon_stat_vis.pdf"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/alpha_div_stats.R --metadata {input.metadata} \
                                          --faith_pd {input.faith_pd} \
                                          --shannon {input.shannon} \
                                          --faith_lm_sec {output.faith_lm_sec} \
                                          --faith_dunn {output.faith_dunn} \
                                          --shannon_lm_sec {output.shannon_lm_sec} \
                                          --shannon_dunn {output.shannon_dunn} \
                                          --faith_plot {output.faith_plot} \
                                          --shannon_plot {output.shannon_plot}
        """


rule beta_diversity_plots:
    input:
        metadata = config["processed_metadata"],
        unweighted_uni = "data/core_outputs/unweighted_unifrac_pcoa_results.qza",
        weighted_uni = "data/core_outputs/weighted_unifrac_pcoa_results.qza",
        faith_pd = "data/core_outputs/faith_pd.tsv",
        shannon = "data/core_outputs/shannon_entropy.tsv"
    output:
        unweighted_plot = "plots/unweighted_unifrac_pcoa.pdf",
        weighted_plot = "plots/weighted_unifrac_pcoa.pdf"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/beta_div_plots.R --metadata {input.metadata} \
                                         --unweighted_unifrac {input.unweighted_uni} \
                                         --weighted_unifrac {input.weighted_uni} \
                                         --faith_pd {input.faith_pd} \
                                         --shannon {input.shannon} \
                                         --output_uu {output.unweighted_plot} \
                                         --output_wu {output.weighted_plot}
        """


rule beta_diversity_stats:
    input:
        metadata = config["processed_metadata"],
        uw_dist = "data/core_outputs/uw_dist_matrix.tsv",
        w_dist = "data/core_outputs/w_dist_matrix.tsv"
    output:
        w_adonis = "stats/w_adonis_results.tsv",
        uw_adonis = "stats/uw_adonis_results.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/beta_div_stats.R --metadata {input.metadata} \
                                         --uu_dist {input.uw_dist} \
                                         --wu_dist {input.w_dist} \
                                         --uu_adonis {output.uw_adonis} \
                                         --wu_adonis {output.w_adonis}
        """


rule family_abundance_plots:
    input:
        otu_table = "data/qiime/otu_table.qza",
        taxonomy = "data/qiime/taxonomy.qza",
        metadata = config["processed_metadata"]
    output:
        plot1 = "plots/family_abun1.pdf",
        plot2 = "plots/family_abun2.pdf"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/family_abun_plots.R --metadata {input.metadata} \
                                            --otu {input.otu_table} \
                                            --taxonomy {input.taxonomy} \
                                            --plot1 {output.plot1} \
                                            --plot2 {output.plot2}
        """


rule family_abundance_stats:
    input:
       otu_table = "data/qiime/otu_table.qza",
       taxonomy = "data/qiime/taxonomy.qza",
       metadata = config["processed_metadata"]
    output:
        lm = "stats/family_abun_lm.tsv",
        dunn = "stats/family_abun_dunn.tsv",
        stat_plot = "plots/famAbun_stat_vis.pdf"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/family_abun_stats.R --metadata {input.metadata} \
                                            --otu {input.otu_table} \
                                            --taxonomy {input.taxonomy} \
                                            --stat_plot {output.stat_plot} \
                                            --linear_model {output.lm} \
                                            --dunn {output.dunn}
        """


rule histopathology:
    input:
        histo = "data/misc/processed_histopathology.tsv"
    output:
        plot = "plots/histopathology.pdf",
        lm = "stats/histopathology_lm.tsv",
        dunn = "stats/histopathology_dunn.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/histopathology.R --histo {input.histo} \
                                         --histo_plot {output.plot} \
                                         --linear_model {output.lm} \
                                         --dunn {output.dunn}
        """


rule toxin:
    input:
        neat_toxin = "data/misc/processed_neatToxin.tsv",
        dil_toxin = "data/misc/processed_dilutedToxin.tsv"
    output:
        neat_plot = "plots/neat_toxin.pdf",
        diluted_plot = "plots/dil_toxin.pdf",
        neat_kruskal = "stats/neatToxin_kruskal_test.tsv",
        neat_dunn = "stats/neatToxin_dunn_test.tsv",
        dil_kruskal = "stats/dilToxin_kruskal_test.tsv",
        dil_dunn = "stats/dilToxin_dunn_test.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/toxin.R --neat_toxin {input.neat_toxin} \
                                --dil_toxin {input.dil_toxin} \
                                --neat_plot {output.neat_plot} \
                                --diluted_plot {output.diluted_plot} \
                                --neat_kruskal {output.neat_kruskal} \
                                --neat_dunn {output.neat_dunn} \
                                --diluted_kruskal {output.dil_kruskal} \
                                --diluted_dunn {output.dil_dunn}
        """


rule metabolomics:
    input:
        metab = "data/misc/processed_metabolomics.tsv"
    output:
        metab_plot = "plots/metabolomics.pdf",
        metab_lm = "stats/metab_linear_model.tsv",
        metab_dunn = "stats/metab_dunn_test.tsv",
        metab_kruskal = "stats/metab_kruskal_test.tsv"
    conda:
        "r_env"
    shell:
        """
        Rscript scripts/metab.R --metab {input.metab} \
                                --metab_plot {output.metab_plot} \
                                --metab_lm {output.metab_lm} \
                                --metab_dunn {output.metab_dunn} \
                                --metab_kruskal {output.metab_kruskal}
        """