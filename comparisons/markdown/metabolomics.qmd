---
title: "metabolomics"
format: html
editor: visual
---

```{r, include=FALSE}
library(broom)
library(cowplot)
library(magrittr)
library(qiime2R)
library(tidyverse)
library(ggpubr)
library(rstatix)
```

**File Paths**

```{r}
metadata_FP <- '../../cecum/data/misc/filt_cecal_processed_metadata.tsv'
metab_FP <- '../../colon/data/misc/metabolomics.csv'
wanted_metabs <- c('Acetic Acid (ug/g)',
                   'Propanoic Acid (ug/g)',
                   'n-Butanoic Acid (ug/g)')
unwanted_columns <- c('2-methyl-propanoic acid (ug/g)',
                     'Isopentanoic Acid (ug/g)',
                     '2-methyl-Butanoic Acid (ug/g)',
                     'Pentanoic Acid (ug/g)',
                     'Notes',
                     'Sample Group',
                     'SCFA Data File',
                     'Acq. Date-Time',
                     'Tube_Label',
                     'Sample_Type',
                     'Collection Date',
                     'Dil.',
                     'tube_num',
                     'date',
                     'corr_sample_num')
metab_labs <- c('Acetic Acid',
                'Propanoic Acid',
                'n-Butanoic Acid')
names(metab_labs) <- wanted_metabs
```

**Prepping Metadata and Metabolomics Files**

ATTENTION: Some of the zeroes on this plot are from samples labeled 'ND' - most of these samples were from the high-fat/low-fiber diet.

```{r}
## metabolomics file prep 
metab <- read_csv(metab_FP)

## metadta file prep 
metadata <- read_tsv(metadata_FP)

metadata %>% 
  merge(metab, by = 'mouse_id') %>% 
  select(-(all_of(unwanted_columns))) %>% 
  gather(wanted_metabs, key = metabolite, value = concentration) %>% 
  filter(!is.na(mouse_id)) -> pre_metab

## changes all 'ND' values in the concentration column to 0 
pre_metab$concentration[pre_metab$concentration == 'ND'] <- 0

pre_metab %>% 
  filter(!is.na(concentration)) %>% 
  mutate(concentration = as.numeric(concentration)) -> big_metab
```

**Putting Together Stats for the Ggplot**\
Here I'm running a Kruskal-Wallis and Dunn's Post Hoc test on the metabolite data so that I can add the p-value significance to the overall ggplot.

```{r}
## generating stats to place on ggplot for visualization
## running a kruskal-wallis test on the metabolite data 
big_metab %>% 
  group_by(metabolite) %>% 
  do(tidy(kruskal.test(concentration ~ diet,
             data = .))) %>% 
  ungroup() %>% 
  arrange(p.value) %>% 
  mutate(p.adj = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(metabolite)) %>%
  filter(p.adj <= 0.05)-> metab_kruskal

## running dunn's post hoc test on the metabolite data 
big_metab %>% 
  group_by(metabolite) %>% 
  mutate(test_id = paste(metabolite)) %>% 
  filter(test_id %in% metab_kruskal$test_id) %>% 
  dunn_test(concentration ~ diet,
            p.adjust.method = 'BH',
            data = .) %>% 
  add_y_position(scales = 'free_y') -> metab_dunn

metab_dunn
```

**Ggplot Construction for Metabolites**

Very rough draft of the plot for the metabolite data - I know that I will probably need to edit this.

```{r, fig.width=15, fig.height=6.5}
big_metab %>% 
  ggplot(aes(x = diet, y = concentration)) +
  geom_violin(aes(group = diet)) +
  geom_jitter(alpha = 0.4, width = 0.1, height = 0) +
  scale_x_discrete(labels = c('Chow', 
                              'HFt/\nHFb', 
                              'HFt/\nLFb',
                              'LFt/\nHFb', 
                              'LFt/\nLFb')) +
  facet_wrap(~metabolite, 
             nrow = 1,
             labeller = labeller(metabolite = metab_labs)) +
  theme_bw(base_size = 20) +
  stat_pvalue_manual(metab_dunn,
                     tip.length = 0.01,
                     label = 'p.adj.signif',
                     hide.ns = TRUE) +
  xlab('Diet') +
  ylab('Concentration (ug/g)') +
  ggtitle('Metabolite Concentration by Diet') -> metab_plot

metab_plot
```

**Linear Modeling**

Grouped the stats per metabolite detected by the core and compared against concentration of said metabolite per diet. I also am not sure if this is the best way to run the stats but it's a start.

```{r}
big_metab %>%
  group_by(metabolite) %>% 
  do(glance(lm(concentration ~ (purified_diet * seq_depth) + high_fat * high_fiber,
             data = .))) %>% 
  ungroup() %>%
  na.omit() %>%
  mutate(adj.p = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(metabolite)) -> metab_results_full

big_metab %>% 
  group_by(metabolite) %>% 
  mutate(test_id = paste(metabolite)) %>% 
  filter(test_id %in% metab_results_full$test_id) %>% 
  do(tidy(lm(concentration ~ (purified_diet * seq_depth) + high_fat * high_fiber,
             data = .))) %>%
  filter(term != '(Intercept)') %>% 
  na.omit() -> metab_results

metab_results['signif'] <- symnum(metab_results$p.value,
                                  cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1),
                                  symbols = c("****", "***", "**", "*", "+", "ns"),
                                  abbr.colnames = FALSE,
                                  na = "")
metab_results
```

**Saving my Outputs**

```{r}
## plot as a pdf
ggsave("metabolomics.pdf",
       plot = metab_plot,
       width = 15,
       height = 7,
       path = '../plots')

## as an rdata object
save(metab_plot,
     file = '../../figures/metab.rdata')

## statistical tests 
write_tsv(metab_results,
          '../stats/metab_linear_model.tsv')
write_tsv(metab_dunn,
          '../stats/metab_dunn_test.tsv')
write_tsv(metab_kruskal,
          '../stats/metab_kruskal_test.tsv')
```
