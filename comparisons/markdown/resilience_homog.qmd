---
title: "Resilience and Homogeneity"
format: html
editor: visual
---

```{r include=FALSE}
library(broom)
library(cowplot)
library(magrittr)
library(qiime2R)
library(tidyverse)
library(viridis)
library(rstatix)
```

```{r}
## this function combines your metadata file and your distance matrix 
## it also pulls out the wanted diet variable from the metadata file 
## requires the input of a distance matrix (dist_mat), metadata file (meta),
## and the list of unique diets (mydiet)
## used in subsequent resil/homog_diet_assembly functions
dist_filter <- function(dist_mat, 
                        meta, 
                        mydiet){
  meta %>% 
    filter(diet == mydiet) -> min_meta

  dist_mat <- data.frame(dist_mat)
  rownames(dist_mat) <- dist_mat[,1]
  dist_mat <- dist_mat[,-1]
  
  sample_idx <- rownames(dist_mat) %in% min_meta$sampleid 
  
  min_dist_mat <- dist_mat[sample_idx, sample_idx]
  min_dist_mat <- as_tibble(min_dist_mat, rownames = 'sampleid')
  colnames(min_dist_mat)[2:ncol(min_dist_mat)] <- min_dist_mat$sampleid
  return(min_dist_mat)
}

## all functions for calculating statistical analysis and creating a plot visualization
stats <- function(biom_table){
  ## linear modeling 
  biom_table %>% 
    filter(day_post_inf.y != -15) %>% 
    group_by(day_post_inf.y) %>% 
    do(glance(lm(dist ~ (purified_diet.y * seq_depth.y) + high_fat.y * high_fiber.y,
             data = .))) %>% 
    ungroup() %>% 
    na.omit() %>% 
    mutate(adj.p = p.adjust(p.value, 
                            method = "BH"),
          test_id = paste(day_post_inf.y)) %>%
    filter(p.value <= 0.05) -> lm_full

  biom_table %>% 
    group_by(day_post_inf.y) %>% 
    mutate(test_id = paste(day_post_inf.y)) %>% 
    filter(test_id %in% lm_full$test_id) %>% 
    do(tidy(lm(dist ~ (purified_diet.y * seq_depth.y) + high_fat.y * high_fiber.y,
                 data = .))) %>%
    filter(term != '(Intercept)') %>% 
    na.omit() -> lm_results

  lm_results['signif'] <- symnum(lm_results$p.value,
                                  cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1),
                                  symbols = c("****", "***", "**", "*", "+", "ns"),
                                  abbr.colnames = FALSE,
                                  na = "")
  ## kruskal wallis and dunns post hoc test
  biom_table %>% 
    na.omit() %>% 
    filter(day_post_inf.y != -15) %>% 
    group_by(day_post_inf.y) %>% 
    do(tidy(kruskal.test(dist ~ diet,
               data = .))) %>% 
    ungroup() %>% 
    arrange(p.value) %>% 
    mutate(p.adj = p.adjust(p.value,
                            method = "BH"),
          test_id = paste(day_post_inf.y)) %>%
    filter(p.adj <= 0.05) -> kruskal
  
  biom_table %>% 
    na.omit() %>% 
    group_by(day_post_inf.y) %>% 
    mutate(test_id = paste(day_post_inf.y)) %>% 
    filter(test_id %in% kruskal$test_id) %>% 
    dunn_test(dist ~ diet,
              p.adjust.method = 'BH',
              data = .) -> dunn
  ## creating a named list of results
  my_list <- list(LinearModel = lm_results,
                  KruskalTest = kruskal,
                  DunnPostHoc = dunn)
  return(my_list)
}

## editing dunns post hoc test so that I can calculate the difference between means
## merge by mouse_id as well!!
stat_plot_prep <- function(biom_table,
                           dunn_test){
  biom_table %>% 
    group_by(diet, day_post_inf.y) %>% 
    summarise(mean_dist = mean(dist)) -> mean_dist
  dunn_test %>% 
    merge(mean_dist, 
        by.x = c('group1',
                 'day_post_inf.y'),
        by.y = c('diet',
                 'day_post_inf.y')) %>% 
    rename('group1_dist' = 'mean_dist') %>% 
    merge(mean_dist,
        by.x = c('group2',
                 'day_post_inf.y'),
        by.y = c('diet',
                 'day_post_inf.y')) %>% 
    rename('group2_dist' = 'mean_dist') %>% 
    mutate(diff_means = (group1_dist - group2_dist),
          stat_diff_means = if_else(p.adj > 0.05, 0, diff_means)) -> new_dunn
  return(new_dunn)
}

## actual statistical plot visualization!!
stat_plot <- function(new_dunn){
  new_dunn %>% 
    filter(day_post_inf.y != -15) %>%
    ggplot(aes(x = group1, y = group2)) +
    geom_tile(aes(fill = stat_diff_means), alpha = 0.8, color = 'black') +
    scale_fill_gradient2(low = 'green', high = 'blue', name = 'Group 1 -\nGroup 2',
                         trans = 'reverse') +
    geom_text(aes(label = p.adj.signif)) +
    scale_x_discrete(labels = c('Chow',
                                'HFt/\nHFb',
                                'HFt/\nLFb',
                                'LFt/\nHFb')) +
    scale_y_discrete(labels = c('HFt / HFb',
                                'HFt / LFb',
                                'LFt / HFb',
                                'LFt / LFb')) +
    facet_grid(~day_post_inf.y) +
    theme_bw(base_size = 20) +
    theme(strip.text.y = element_text(angle = 0)) +
    xlab('Group 1') +
    ylab('Group 2') -> stat_vis
  return(stat_vis)
}
```

Load in datums

Needed file paths for analysis and reading in the needed files for simplicity later on.

```{r, include=FALSE}
metadata_FP <- '../data/misc/comp_metadata.tsv'
uu_dist_fp <- '../data/s1_filt_core/uw_dist_matrix.tsv'
wu_dist_fp <- '../data/s1_filt_core/w_dist_matrix.tsv'
## lists to redo the diet names on the facet labels of the ggplot created below 
diet_labs <- 
    c('Chow', 
      'High Fat / High Fiber', 
      'High Fat / Low Fiber', 
      'Low Fat / High Fiber', 
      'Low Fat / Low Fiber')

names(diet_labs) <- c('Chow', 'HF/HF', 'HF/LF', 'LF/HF', 'LF/LF')
stat_labs <- c('Chow',
               'High Fat / High Fiber', 
               'High Fat / Low Fiber', 
               'Low Fat / High Fiber')
names(stat_labs) <- c('Chow',
                      'HF/HF',
                      'HF/LF',
                      'LF/HF')

meta <- read_tsv(metadata_FP)
names(meta)[names(meta) == '#SampleID'] <- 'sampleid'

uu_dist <- read_tsv(uu_dist_fp)
wu_dist <- read_tsv(wu_dist_fp)

## pulling out unique diets 
diet_col <- 'diet'
```

# Functions for Homogeneity and Resilience Calculations

```{r}
## resiliency ggplot prep functions 

## this function takes the output from dist_filter and the metadata file 
## and pulls all unique distance matrix comparisons out for that particular diet 
## and places them in a new column 
## it also esta the baseline that all sample pairs will be compared to 
## requires the distance matrix output from the dist_filter (min_dist_mat),
## and the metadata file (meta)
resil_dist_comp <- function(min_dist_mat, 
                            meta){
  meta %>% 
    select(sampleid, diet, day_post_inf, high_fat, high_fiber, purified_diet,
           seq_depth, mouse_id) -> min_meta
  
  min_dist_mat %>% 
    rename(sampleid_x = sampleid) %>% 
    gather(-sampleid_x, key = sampleid_y, value = dist) %>% 
    merge(min_meta, by.x = 'sampleid_x', by.y = 'sampleid') %>% 
    merge(min_meta, by.x = 'sampleid_y', by.y = 'sampleid') -> long_dist_mat
  
  long_dist_mat %>% 
    mutate(key = paste0(pmin(sampleid_x, sampleid_y), 
                        pmax(sampleid_x, sampleid_y), 
                        sep = "_")) %>% 
    distinct(key, .keep_all = TRUE) %>% 
    filter(sampleid_x != sampleid_y,
           ## for homogenicity testing, do day_post_inf.x == day_post_inf.y 
           ## and don't filter out day -15 
           day_post_inf.x == -8,
           day_post_inf.y > -8) %>% 
    select(-diet.y) %>% 
    rename(diet = diet.x) -> long_dist_mat
  
  return(long_dist_mat)
}

## this is a for loop that does the above analysis for each diet variable and places them 
## in a list of dataframes that can be bound together to create one plot for comparison
## requires the input of a distance matrix (dist_mat), metadata file (meta),
## and the list of unique diets (mydiet)
resil_diet_assembly <- function(dist_mat, 
                                meta,
                                mydiet){
  resil <- list()
    for (i in unique(unlist(meta[mydiet]))){
      tmp_dist_mat <- dist_filter(dist_mat, 
                                  meta, 
                                  i)
      tmp_resil <- resil_dist_comp(tmp_dist_mat, 
                                   meta)
      resil[[i]] <- tmp_resil
    }
  resil <- bind_rows(resil)
  return(resil)
}


## homogeneity ggplot prep functions 

## this function takes the output from dist_filter and the metadata file 
## and pulls all unique distance matrix comparisons out for that particular diet 
## and places them in a new column 
## it also esta the baseline that all sample pairs will be compared to 
## requires the distance matrix output from the dist_filter (min_dist_mat),
## and the metadata file (meta)
homog_dist_comp <- function(min_dist_mat, meta){
  meta %>% 
    select(sampleid, diet, day_post_inf, high_fat, high_fiber, purified_diet,
           seq_depth, mouse_id) -> min_meta
  
  min_dist_mat %>% 
    rename(sampleid_x = sampleid) %>% 
    gather(-sampleid_x, key = sampleid_y, value = dist) %>% 
    merge(min_meta, by.x = 'sampleid_x', by.y = 'sampleid') %>% 
    merge(min_meta, by.x = 'sampleid_y', by.y = 'sampleid') -> long_dist_mat
  
  long_dist_mat %>% 
    mutate(key = paste0(pmin(sampleid_x, sampleid_y), 
                        pmax(sampleid_x, sampleid_y), 
                        sep = "_")) %>% 
    distinct(key, .keep_all = TRUE) %>% 
    filter(sampleid_x != sampleid_y,
           ## for homogenicity testing, do day_post_inf.x == day_post_inf.y 
           ## and don't filter out day -15 
           day_post_inf.x == day_post_inf.y) %>% 
           select(-diet.y) %>% 
           rename(diet = diet.x) -> long_dist_mat
  
  return(long_dist_mat)
}

## this is a for loop that does the above analysis for each diet variable and places them 
## in a list of dataframes that can be bound together to create one plot for comparison 
## requires the input of a distance matrix (dist_mat), metadata file (meta),
## and the list of unique diets (mydiet)
homog_diet_assembly <- function(dist_mat, 
                                meta,
                                mydiet){
  homog <- list()
    for (i in 1:length(mydiet)){
      tmp_dist_mat <- dist_filter(dist_mat, meta, mydiet[i])
      tmp_homog <- homog_dist_comp(tmp_dist_mat, meta)
      homog[[i]] <- tmp_homog
    }
  homog <- bind_rows(homog)
  return(homog)
}

```

# Resilience and Homogeneity Calculations

```{r}
meta %>% 
  filter(diet == 'Chow') -> min_meta

names(uu_dist)[names(uu_dist) == '...1'] <- 'row_sampleid'
uu_dist <- as.data.frame(uu_dist)
rownames(uu_dist) <- uu_dist$row_sampleid
uu_dist <- subset(uu_dist,
                  select = -row_sampleid)
  
sample_idx <- rownames(uu_dist) %in% min_meta$sampleid
  
min_dist_mat <- uu_dist[sample_idx, sample_idx]
min_dist_mat <- as_tibble(min_dist_mat, rownames = 'sampleid')
colnames(min_dist_mat)[2:ncol(min_dist_mat)] <- min_dist_mat$sampleid

min_dist_mat %>% 
    rename(sampleid_x = sampleid) %>% 
    gather(-sampleid_x, key = sampleid_y, value = dist) %>% 
    merge(min_meta, by.x = 'sampleid_x', by.y = 'sampleid') %>% 
    merge(min_meta, by.x = 'sampleid_y', by.y = 'sampleid') -> long_dist_mat

long_dist_mat %>% 
    mutate(key = paste0(pmin(sampleid_x, sampleid_y), 
                        pmax(sampleid_x, sampleid_y), 
                        sep = "_")) %>% 
    distinct(key, .keep_all = TRUE) %>% 
    filter(sampleid_x != sampleid_y) %>% 
           ## for homogenicity testing, do day_post_inf.x == day_post_inf.y 
           ## and don't filter out day -15 
           # day_post_inf.x == -8,
           # day_post_inf.y > -8) %>% 
    select(-diet.y) %>% 
    rename(diet = diet.x) -> long_dist_mat

long_dist_mat %>% 
  filter(day_post_inf.x == -8)
```

```{r}
## unweighted unifrac
uu_resil <- resil_diet_assembly(uu_dist,
                                meta,
                                diet_col)

## weighted unifrac
wu_resil <- resil_diet_assembly(wu_dist,
                                meta,
                                diet_col)
## unweighted unifrac
uu_homog <- homog_diet_assembly(uu_dist,
                                meta,
                                diet_col)

## weighted unifrac
wu_homog <- homog_diet_assembly(wu_dist,
                                meta,
                                diet_col)
```

**Unweighted UniFrac Resiliency Plot**

This plot looks at microbiome resiliency over time by the five different diets using the unweighted UniFrac distance matrix and metadata file (above functions).

```{r, warning=FALSE, fig.width=14, fig.height=5}
uu_resil %>% 
  ggplot(aes(x = day_post_inf.y, y = dist)) +
    geom_boxplot((aes(group = day_post_inf.y)), outlier.shape = NA) +
    geom_vline(xintercept = -3, linetype = 'dashed', color = 'red', size = 0.2) +
    geom_vline(xintercept = 0, linetype = 'dashed', color = 'purple', size = 0.2) +
    geom_line(aes(group = mouse_id.y), alpha = 0.1) +
    geom_jitter(width = 0.1, alpha = 0.2) +
    geom_smooth(se = FALSE, method = 'loess') + 
    scale_x_continuous(breaks = c(-3, 0, 3)) + 
    scale_y_reverse() +
    facet_wrap(~diet, 
               labeller = labeller(diet = diet_labs),
               nrow = 1) +
    theme_bw(base_size = 20) +
    xlab('Days Relative to Infection') +
    ylab('Unweighted UniFrac Distance\n(Pairwise Distances from Day -8)') +
    ggtitle("Microbiome Resilience Over Time") -> uu_resil_plot

uu_resil_plot
```

**Unweighted UniFrac Resiliency Linear Modeling, Kruskal-Wallis, and Dunn's Post Hoc Test**

Statistical analysis by diet for the unweighted UniFrac resiliency plot above.

```{r, fig.height=3.5, fig.width=10}
uu_resil_stats <- stats(uu_resil)

uu_resil_lm <- uu_resil_stats$LinearModel
uu_resil_kruskal <- uu_resil_stats$KruskalTest
uu_resil_dunn <- uu_resil_stats$DunnPostHoc

new_uu_resil_dunn <- stat_plot_prep(uu_resil,
                                    uu_resil_dunn)
stat_plot(new_uu_resil_dunn) -> uu_resil_stat_vis

uu_resil_stat_vis
```

**Weighted UniFrac Resiliency Plot**

This plot looks at microbiome resiliency over time by the five different diets using the weighted UniFrac distance matrix and metadata file (above functions).

```{r, warning=FALSE, fig.width=14, fig.height=5}
wu_resil %>% 
  ggplot(aes(x = day_post_inf.y, y = dist)) +
    geom_boxplot((aes(group = day_post_inf.y)), outlier.shape = NA) +
    geom_vline(xintercept = -3, linetype = 'dashed', color = 'red', size = 0.2) +
    geom_vline(xintercept = 0, linetype = 'dashed', color = 'purple', size = 0.2) +
    geom_line(aes(group = mouse_id.y), alpha = 0.1) +
    geom_jitter(width = 0.1, alpha = 0.2) +
    geom_smooth(se = FALSE, method = 'loess') + 
    scale_x_continuous(breaks = c(-3, 0, 3)) + 
    scale_y_reverse() +
    facet_wrap(~diet, 
               labeller = labeller(diet = diet_labs),
               nrow = 1) +
    theme_bw(base_size = 20) +
    xlab('Days Relative to Infection') +
    ylab('Weighted UniFrac Distance\n(Pairwise Distances from Day -8)') +
    ggtitle("Microbiome Resilience Over Time") -> wu_resil_plot

wu_resil_plot
```

**Weighted UniFrac Resiliency Linear Modeling, Kruskal-Wallis, and Dunn's Post Hoc Test**

```{r}
wu_resil_stats <- stats(wu_resil)

wu_resil_lm <- wu_resil_stats$LinearModel
wu_resil_kruskal <- wu_resil_stats$KruskalTest
wu_resil_dunn <- wu_resil_stats$DunnPostHoc

stat_plot_prep(wu_resil,
               wu_resil_dunn) -> new_w_resil_dunn

```

Weighted UniFrac Resiliency Dunn's Post Hoc Visualization

```{r, fig.height=3.5, fig.width=10}
stat_plot(new_w_resil_dunn) -> w_resil_stat_vis

w_resil_stat_vis
```

**Unweighted UniFrac Homogeneity Plot**\

```{r, warning=FALSE, fig.width=14, fig.height=5}
uu_homog %>% 
  ggplot(aes(x = day_post_inf.y, y = dist)) +
    geom_boxplot((aes(group = day_post_inf.y)), outlier.shape = NA) +
    geom_vline(xintercept = -3, linetype = 'dashed', color = 'red', size = 0.2) +
    geom_vline(xintercept = 0, linetype = 'dashed', color = 'purple', size = 0.2) +
    geom_line(aes(group = mouse_id.y), alpha = 0.1) +
    geom_jitter(width = 0.1, alpha = 0.2) +
    geom_smooth(se = FALSE, method = 'loess', color = 'blue') + 
    scale_x_continuous(breaks = c(-15, -8, -3, 0, 3)) + 
    scale_y_reverse() +
    facet_wrap(~diet, 
               labeller = labeller(diet = diet_labs),
               nrow = 1) +
    theme_bw(base_size = 20) +
    xlab('Days Relative to Infection') +
    ylab('Unweighted UniFrac Distance\n(Pairwise Distances within Day)') +
    ggtitle("Microbiome Homogeneity Over Time") -> uu_homog_plot

uu_homog_plot
```

**Unweighted UniFrac Homogeneity Linear Modeling**

```{r, fig.height=3.5, fig.width=14}
uu_homog_stats <- stats(uu_homog)

uu_homog_lm <- uu_homog_stats$LinearModel
uu_homog_kruskal <- uu_homog_stats$KruskalTest
uu_homog_dunn <- uu_homog_stats$DunnPostHoc

stat_plot_prep(uu_homog,
               uu_homog_dunn) -> new_uu_homog_dunn
stat_plot(new_uu_homog_dunn) -> uu_homog_stat_vis

uu_homog_stat_vis
```

**Weighted UniFrac Homogeneity Plot**

```{r, warning=FALSE, fig.width=14, fig.height=5}
wu_homog %>% 
  ggplot(aes(x = day_post_inf.y, y = dist)) +
    geom_boxplot((aes(group = day_post_inf.y)), outlier.shape = NA) +
    geom_vline(xintercept = -3, linetype = 'dashed', color = 'red', size = 0.2) +
    geom_vline(xintercept = 0, linetype = 'dashed', color = 'purple', size = 0.2) +
    geom_line(aes(group = mouse_id.y), alpha = 0.1) +
    geom_jitter(width = 0.1, alpha = 0.2) +
    geom_smooth(se = FALSE, method = 'loess', color = 'blue') + 
    scale_x_continuous(breaks = c(-15, -8, -3, 0, 3)) + 
    scale_y_reverse() +
    facet_wrap(~diet, 
               labeller = labeller(diet = diet_labs),
               nrow = 1) +
    theme_bw(base_size = 20) +
    xlab('Days Relative to Infection') +
    ylab('Weighted UniFrac Distance\n(Pairwise Distances within Day)') +
    ggtitle("Microbiome Homogeneity Over Time") -> wu_homog_plot

wu_homog_plot
```

**Weighted UniFrac Homogeneity Linear Modeling**

```{r}
wu_homog_stats <- stats(wu_homog)

wu_homog_lm <- wu_homog_stats$LinearModel
wu_homog_kruskal <- wu_homog_stats$KruskalTest
wu_homog_dunn <- wu_homog_stats$DunnPostHoc

stat_plot_prep(wu_homog,
               wu_homog_dunn) -> new_wu_homog_dunn
```

Weighted UniFrac Homogeneity Dunn's Post Hoc Visualization

```{r, fig.height=3.5, fig.width=13}
stat_plot(new_wu_homog_dunn) -> w_homog_stat_vis

w_homog_stat_vis
```

**Putting Unweighted UniFrac Plots Together**

```{r, fig.width=28, fig.height=9}
plot_grid(uu_resil_plot, uu_homog_plot,
          uu_resil_stat_vis, uu_homog_stat_vis,
          nrow = 2,
          labels = c('a)', 'b)', 'c)', 'd)'),
          label_size = 22,
          rel_heights = c(1, 0.6),
          rel_widths = c(0.95, 1)) -> uu_resil_homog_together

uu_resil_homog_together
```

**Putting Weighted UniFrac Plots Together**

```{r, fig.width=28, fig.height=9}
plot_grid(wu_resil_plot, wu_homog_plot,
          w_resil_stat_vis, w_homog_stat_vis,
          nrow = 2,
          labels = c('a)', 'b)', 'c)', 'd)'),
          label_size = 22,
          rel_heights = c(1, 0.6),
          rel_widths = c(0.95, 1)) -> w_resil_homog_together

w_resil_homog_together
```

**Writing all Statistical Results to a .tsv**

```{r}
write_tsv(wu_homog_lm,
          '../stats/wu_homogeneity.tsv')
write_tsv(uu_homog_lm,
          '../stats/uu_homogeneity.tsv')
write_tsv(uu_resil_lm,
          '../stats/uu_resiliency.tsv')
write_tsv(wu_resil_lm,
          '../stats/wu_resiliency.tsv')
```

**Saving all Plots**

```{r}
## as a pdf
ggsave("../plots/wu_resiliency.pdf",
       plot = wu_resil_plot,
       width = 14, 
       height = 5)
ggsave("uu_resiliency.pdf", 
       plot = uu_resil_plot,
       width = 14, 
       height = 5,
       path = '../plots')
ggsave("wu_homogeneity.pdf", 
       plot = wu_homog_plot,
       width = 14, 
       height = 5,
       path = '../plots')
ggsave("uu_homogeneity.pdf", 
       plot = uu_homog_plot,
       width = 14, 
       height = 5,
       path = '../plots')
ggsave("wu_resil_stats.pdf", 
       plot = w_resil_stat_vis,
       width = 13, 
       height = 3.5,
       path = '../plots')
ggsave("wu_homog_stats.pdf", 
       plot = w_homog_stat_vis,
       width = 13, 
       height = 3.5,
       path = '../plots')
ggsave("w_resil_homog_stat_vis.pdf", 
       plot = w_resil_homog_together,
       width = 28, 
       height = 9,
       path = '../plots')
ggsave("uu_resil_homog_stat_vis.pdf", 
       plot = uu_resil_homog_together,
       width = 28, 
       height = 9,
       path = '../plots')

## as an rdata object
save(wu_resil_plot,
     file = '../figures/wu_resil.rdata')
save(uu_resil_plot,
     file = '../figures/uu_resil.rdata')
save(wu_homog_plot,
     file = '../figures/wu_homog.rdata')
save(uu_homog_plot,
     file = '../figures/uu_homog.rdata')
save(w_resil_stat_vis,
     file = '../figures/wu_resil_stats.rdata')
save(uu_resil_stat_vis,
     file = '../figures/uu_resil_stats.rdata')
save(w_homog_stat_vis,
     file = '../figures/wu_homog_stats.rdata')
save(uu_homog_stat_vis,
     file = '../figures/uu_homog_stats.rdata')
```
