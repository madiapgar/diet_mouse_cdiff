---
title: "toxin"
format: html
editor: visual
---

```{r, include=FALSE}
library(broom)
library(cowplot)
library(magrittr)
library(qiime2R)
library(tidyverse)
library(ggpubr)
library(rstatix)
```

**File Paths**

```{r}
metadata_FP <- '../../cecum/data/misc/filt_cecal_processed_metadata.tsv'
toxin_FP <- '../../colon/data/misc/toxin_final_data.tsv'

neat_labs <- c('TcdA', 'TcdB')
names(neat_labs) <- c('Total TcA Neat', 'Total TcB Neat')

dil_labs <- c('TcdA', 'TcdB')
names(dil_labs) <- c('Total TcA 1:10', 'Total TcB 1:10')
```

**File Processing**

ATTENTION: You have more zeroes in the toxin data because some of the toxin concentrations were 'below detection limit' so they were put in as zeroes. It doesn't necessarily mean that there is less toxin in those samples. We also have diluted samples that were put in as 'chow' so they were turned to zeroes too - should those have been turned to zeroes?

```{r}
## toxin data 
toxin <- read_tsv(toxin_FP)
wanted_ids <- toxin$mouse_id

## metadata 
metadata <- read_tsv(metadata_FP) %>% 
  select(!c(tube_num, date, corr_sample_num))

## toxin neat concentrations (non_diluted)
toxin %>% 
  merge(metadata, by = 'mouse_id') %>% 
  select(!c('Total TcA 1:10', 'Total TcB 1:10')) %>% 
  gather('Total TcA Neat', 'Total TcB Neat', 
         key = neat_toxin, value = neat_conc) -> pre_neat_toxin

pre_neat_toxin$neat_conc[pre_neat_toxin$neat_conc == 'BDL'] <- '0'

pre_neat_toxin %>% 
  mutate(neat_conc = as.numeric(neat_conc)) %>% 
  select(!c('Tube_Label',
            'Collection Date',
            'Sample_Type',
            'Extra_Sample')) -> neat_toxin
  
## toxin diluted concentrations 
## chow is not included in this 
toxin %>% 
  merge(metadata, by = 'mouse_id') %>% 
  select(!c('Total TcA Neat', 'Total TcB Neat')) %>% 
  gather('Total TcA 1:10', 'Total TcB 1:10',
         key = dil_toxin, value = dil_conc) -> pre_dil_toxin

pre_dil_toxin$dil_conc[pre_dil_toxin$dil_conc == 'BDL'] <- '0'
pre_dil_toxin$dil_conc[pre_dil_toxin$dil_conc == 'Chow'] <- '0'

pre_dil_toxin %>% 
  mutate(dil_conc = as.numeric(dil_conc)) %>% 
  filter(diet != 'Chow') %>% 
  select(!c('Tube_Label',
            'Collection Date',
            'Sample_Type',
            'Extra_Sample')) -> dil_toxin
```

**Stats on my Toxin Data for Ggplot**

Running Kruskal-Wallis and Dunn's Post Hoc test on the toxin data.

Re-ran the stats with a less stringent p-value adjustment method (BH instead of Bonferroni) and the results still didn't come out as significant in any case.

Not filtering adjusted p-value for the Kruskal-Wallis test because none of the results are significant and the Dunn's Post Hoc test won't work

```{r}
## neat toxin concentration
neat_toxin %>% 
  group_by(neat_toxin) %>% 
  do(tidy(kruskal.test(neat_conc ~ diet,
             data = .))) %>% 
  ungroup() %>%
  arrange(p.value) %>%
  mutate(p.adj = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(neat_toxin)) -> neat_kruskal

neat_toxin %>% 
  group_by(neat_toxin) %>% 
  mutate(test_id = paste(neat_toxin)) %>% 
  filter(test_id %in% neat_kruskal$test_id) %>% 
  dunn_test(neat_conc ~ diet,
            p.adjust.method = 'BH',
            data = .) %>% 
  add_y_position(scales = 'free_y') -> neat_dunn

## diluted toxin concentration
dil_toxin %>% 
  group_by(dil_toxin) %>% 
  do(tidy(kruskal.test(dil_conc ~ diet,
             data = .))) %>% 
  ungroup() %>%
  arrange(p.value) %>%
  mutate(p.adj = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(dil_toxin)) -> dil_kruskal

dil_toxin %>% 
  group_by(dil_toxin) %>% 
  mutate(test_id = paste(dil_toxin)) %>% 
  filter(test_id %in% dil_kruskal$test_id) %>% 
  dunn_test(dil_conc ~ diet,
            p.adjust.method = 'BH',
            data = .) %>% 
  add_y_position(scales = 'free_y') -> dil_dunn
```

**Toxin Plot Construction**

TcdA and TcdB concentrations by diet without any kind of dilution factor.

So, I was actually using the wrong table to calculate the stats above for the ggplot and when I re-ran the stats with the correct table, none of the relationships came out as statistically significant according to p-value (rip).

```{r, fig.height=5, fig.width=8, warning=FALSE}
neat_toxin %>% 
  mutate(study = as.factor(study)) %>% 
  na.omit() %>% 
  ggplot(aes(x = diet, y = neat_conc)) +
  geom_violin(aes(group = diet), draw_quantiles = c(0.5)) +
  geom_jitter(aes(fill = study), alpha = 0.6, width = 0.1, height = 0, pch =21) +
  # scale_y_log10() +
  scale_x_discrete(labels = c('Chow', 
                              'HFt/\nHFb', 
                              'HFt/\nLFb',
                              'LFt/\nHFb', 
                              'LFt/\nLFb')) +
  facet_wrap(~neat_toxin,
             labeller = labeller(neat_toxin = neat_labs)) +
  stat_pvalue_manual(neat_dunn,
                     tip.length = 0.01,
                     label = 'p.adj.signif',
                     hide.ns = TRUE) +
  theme_bw(base_size = 14) +
  xlab('Diet') +
  ylab('Concentration') +
  ggtitle('Toxin Neat Concentration by Diet') -> neat_plot

neat_plot
```

TcA and TcB concentrations by diet with a 1:10 dilution factor.

You're looking at the plot and you're like, "there must be an issue, there are no significance bars according to p-value, there must be a mistake!", no, there's not a mistake, none of them are significant (unfortunately). This plot also currently doesn't have any points representing the Chow diet on it because the Chow diets weren't diluted to re-run the toxin ELISA and the other diets were.

```{r, fig.height=5, fig.width=8}
dil_toxin %>% 
  mutate(study = as.factor(study)) %>% 
  na.omit() %>% 
  ggplot(aes(x = diet, y = dil_conc)) +
  geom_violin(aes(group = diet), draw_quantiles = c(0.5)) +
  geom_jitter(aes(fill = study), alpha = 0.7, width = 0.1, height = 0, pch = 21) +
  scale_y_log10() +
  scale_x_discrete(labels = c('HFt/\nHFb', 
                              'HFt/\nLFb',
                              'LFt/\nHFb', 
                              'LFt/\nLFb')) +
  facet_wrap(~dil_toxin,
             labeller = labeller(dil_toxin = dil_labs)) +
  stat_pvalue_manual(dil_dunn,
                     tip.length = 0.01,
                     label = 'p.adj.signif',
                     hide.ns = TRUE) +
  theme_bw(base_size = 14) +
  xlab('Diet') +
  ylab('log10(Concentration)') +
  ggtitle('Toxin Diluted (1:10) Concentration by Diet')-> dil_plot

dil_plot
```

**Saving Plot Outputs**

```{r}
## as a pdf
ggsave("neat_toxin.pdf",
       plot = neat_plot,
       width = 8,
       height = 5,
       path = '../plots')

ggsave("dil_toxin.pdf",
       plot = dil_plot,
       width = 8,
       height = 5,
       path = '../plots')

## as an Rdata object for manuscript figures
save(neat_plot,
     file = '../figures/neat_toxin.rdata')
save(dil_plot,
     file = '../figures/dil_toxin.rdata')
```

**Linear Modeling on Toxin Data**

Linear modeling for neat concentrations of TcA and TcB.

```{r}
neat_toxin %>% 
  group_by(neat_toxin) %>% 
  do(glance(lm(neat_conc ~ (purified_diet * seq_depth) + high_fat * high_fiber,
               data = .))) %>% 
  ungroup() %>%
  na.omit() %>%
  mutate(adj.p = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(neat_toxin)) -> neat_lm_full


neat_toxin %>% 
  group_by(neat_toxin) %>% 
  mutate(test_id = paste(neat_toxin)) %>% 
  filter(test_id %in% neat_lm_full$test_id) %>%
  do(tidy(lm(neat_conc ~ (purified_diet * seq_depth) + high_fat * high_fiber,
               data = .))) %>% 
  filter(term != '(Intercept)') -> neat_results

neat_results['signif'] <- symnum(neat_results$p.value,
                                 cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1),
                                 symbols = c("****", "***", "**", "*", "+", "ns"),
                                 abbr.colnames = FALSE,
                                 na = "")
neat_results
```

Linear modeling for 1:10 diluted concentrations of TcA and TcB.

```{r}
dil_toxin %>% 
  group_by(dil_toxin) %>% 
  do(glance(lm(dil_conc ~ (purified_diet * seq_depth) + high_fat * high_fiber,
               data = .))) %>% 
  ungroup() %>%
  na.omit() %>%
  mutate(adj.p = p.adjust(p.value,
                          method = "BH"),
        test_id = paste(dil_toxin)) -> dil_lm_full 

dil_toxin %>% 
  group_by(dil_toxin) %>% 
  mutate(test_id = paste(dil_toxin)) %>% 
  filter(test_id %in% dil_lm_full$test_id) %>%
  do(tidy(lm(dil_conc ~ (purified_diet * seq_depth) + high_fat * high_fiber,
               data = .))) %>% 
  na.omit() %>% 
  filter(term != '(Intercept)') -> dil_results

dil_results['signif'] <- symnum(dil_results$p.value,
                                 cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 0.1, 1),
                                 symbols = c("****", "***", "**", "*", "+", "ns"),
                                 abbr.colnames = FALSE,
                                 na = "")
dil_results
```

**Saving Statistical Outputs**

This includes the outputs from the Kruskal-Wallis and Dunn's Post Hoc tests but not the linear modeling results yet (because I'm not sure which ones to use).

```{r}
write_tsv(neat_kruskal,
          '../stats/neatToxin_kruskal_test.tsv')
write_tsv(neat_dunn,
          '../stats/neatToxin_dunn_test.tsv')
write_tsv(dil_kruskal,
          '../stats/dilToxin_kruskal_test.tsv')
write_tsv(dil_dunn,
          '../stats/dilToxin_dunn_test.tsv')
```
